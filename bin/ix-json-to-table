#!/usr/bin/env ruby

require 'json'
require 'isna'
require 'optparse'

options = {}
options[:orient] = 'top'
options[:transpose] = false
options[:adjust] = false

OptionParser.new do |opts|

  opts.banner = "Usage: #{$0} [OPTIONS]"

  opts.on('-o', '--orient [STRING]', 'Orientation for headers: top, bottom, both, or none.') do |value|
    options[:orient] = value
  end

  opts.on('-s', '--search [STRING]', 'Search for a particular string.') do |value|
    options[:search] = Regexp.new(value, Regexp::IGNORECASE)
  end

  opts.on('-t', '--transpose', 'Transponse the table and print the output vertically.') do |value|
    options[:transpose] = value
  end

  opts.on('-a', '--adjust', 'Adjust width of tables when in transpose mode.') do |value|
    options[:adjust] = value
  end

end.parse!

required_options = [:orient]
required_options.each do |option|
  unless options[option]
    $stderr.puts "Can not run #{option.to_s} was not given."
    exit 1
  end
end

def print_table(data, options)
  columns = {}

  data.each do |row|
    row.each do |key, value|
      columns[key] ||= key.size
      columns[key] = value.to_s.size if value.to_s.size > columns[key]
    end
  end

  config = {
    :top_left => '╭',
    :top_right => '╮',
    :bottom_left => '╰',
    :bottom_right => '╯',
    :vertical => '│',
    :horizontal => '─',
    :cross => '┼',
    :top => '┬',
    :bottom => '┴',
    :left => '├',
    :right => '┤'
  }

  cm = columns.keys.sort.map do |key|
    s = ''
    value = columns[key]
    s << key.ljust(value, ' ')
    s
  end

  top_ruler = "#{config[:top_left]}#{config[:horizontal]}#{(cm.map { |s| s.gsub(/./, config[:horizontal]) }).join("#{config[:horizontal]}#{config[:top]}#{config[:horizontal]}")}#{config[:horizontal]}#{config[:top_right]}"
  bottom_ruler = "#{config[:bottom_left]}#{config[:horizontal]}#{(cm.map { |s| s.gsub(/./, config[:horizontal]) }).join("#{config[:horizontal]}#{config[:bottom]}#{config[:horizontal]}")}#{config[:horizontal]}#{config[:bottom_right]}"
  middle_ruler = "#{config[:left]}#{config[:horizontal]}#{(cm.map { |s| s.gsub(/./, config[:horizontal]) }).join("#{config[:horizontal]}#{config[:cross]}#{config[:horizontal]}")}#{config[:horizontal]}#{config[:right]}"

  headers = "#{config[:vertical]} " + cm.join(" #{config[:vertical]} ") + " #{config[:vertical]}"

  puts top_ruler

  if options[:orient] == 'top' || options[:orient] == 'both'
    puts headers
    puts middle_ruler
  end

  data.each do |row|
    rm = columns.keys.sort.map do |key|
      s = ''
      value = row[key]
      if options[:search] =~ value.to_s
        s << value.to_s.ljust(columns[key], ' ').gsub(options[:search]) { |m| m.to_ansi.green.to_s }
      else
        s << value.to_s.ljust(columns[key], ' ')
      end
      s
    end
    puts "#{config[:vertical]} " + rm.join(" #{config[:vertical]} ") + " #{config[:vertical]}"
  end

  if options[:orient] == 'bottom' || options[:orient] == 'both'
    puts middle_ruler
    puts headers
  end
  puts bottom_ruler

  puts "Total: #{data.size} rows"
end

def transpose(hash)
  transposed = {}
  hash.each do |key, value|
    transposed[key] ||= []
    transposed[key] << value
  end
  transposed
end

if options[:transpose]

  data = []

  STDIN.each_line do |line|
    begin
      data << JSON.parse(line)
    rescue => e
      $stderr.puts e.message
    end
  end

  max_length = 0

  if options[:adjust]
    data.each do |object|
      object.values.each do |value|
        max_length = value.to_s.size if value.to_s.size > max_length
      end
    end
  end

  data.each do |object|
    transposed = transpose(object)
    new_data = []
    transposed.each do |key, values|
      values.each do |value|
        new_data.push({ 'column' => key, 'value' => value.to_s.ljust(max_length, ' ')})
      end
    end
    puts ''
    print_table(new_data, options)
  end

else

  data = []

  STDIN.each_line do |line|
    begin
      data << JSON.parse(line)
    rescue => e
      $stderr.puts e.message
    end
  end

  exit if data.empty?

  print_table(data, options)

end

